// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/document/formed": {
            "get": {
                "description": "Возвращает список сформированных документов с учетом параметров page и pageSize.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Документы"
                ],
                "summary": "Возвращает сформированные документы.",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Номер страницы",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Размер страницы",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "PENDING",
                        "description": "Статус доставки",
                        "name": "deliveryStatus",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Отправитель или Название",
                        "name": "ownerOrTitle",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.GetDocuments"
                            }
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/document/send-to-earth": {
            "post": {
                "description": "Принимает новый документ с параметрами id, title, owner, createdAt, payload и files.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Документы"
                ],
                "summary": "Принимает новый документ.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID документа",
                        "name": "id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Заголовок документа",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Владелец документа",
                        "name": "owner",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Дата и время создания документа в формате RFC3339",
                        "name": "createdAt",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Payload документа",
                        "name": "payload",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Файлы, прикрепленные к документу",
                        "name": "files",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ",
                        "schema": {
                            "$ref": "#/definitions/model.AcceptDocument"
                        }
                    },
                    "400": {
                        "description": "Ошибка в запросе",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/document/{docID}": {
            "get": {
                "description": "Получает документ из репозитория по указанному ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Документы"
                ],
                "summary": "Получает документ по ID.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID документа",
                        "name": "docID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ",
                        "schema": {
                            "$ref": "#/definitions/model.Document"
                        }
                    },
                    "400": {
                        "description": "Ошибка в запросе",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.AcceptDocument": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.DeliveryStatus": {
            "type": "string",
            "enum": [
                "SUCCESS",
                "PENDING",
                "ERROR"
            ],
            "x-enum-varnames": [
                "DeliveryStatusSuccess",
                "DeliveryStatusPending",
                "DeliveryStatusError"
            ]
        },
        "model.Document": {
            "type": "object",
            "properties": {
                "acceptID": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deliveryStatus": {
                    "$ref": "#/definitions/model.DeliveryStatus"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.File"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "owner": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "receivedTime": {
                    "type": "string"
                },
                "sentTime": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.Status"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "model.File": {
            "type": "object",
            "properties": {
                "documentID": {
                    "description": "Внешний ключ для связи с Document",
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "model.GetDocuments": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Document"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "model.Status": {
            "type": "string",
            "enum": [
                "DELETED",
                "DRAFT",
                "FORMED"
            ],
            "x-enum-varnames": [
                "StatusDeleted",
                "StatusDraft",
                "StatusFormed"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "http://localhost:8081",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "AtomHackMarsBackend RestAPI",
	Description:      "API server for Mars application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
